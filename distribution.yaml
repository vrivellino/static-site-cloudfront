---
AWSTemplateFormatVersion: '2010-09-09'
Description: Proof-of-concept

Parameters:
  CloudfrontLoggingBucket:
    Type: String
    Default: ''
  CloudfrontLoggingPrefix:
    Type: String
    Default: ''
  LambdaFnArn:
    Type: String
    Default: ''
  SslCommonName:
    Type: String
    Default: ''
  SslDomainName:
    Type: String
    Default: ''
  SslDomainZoneId:
    Type: String
    Default: ''

Conditions:
  NoCloudfrontLogging: !Equals [!Ref CloudfrontLoggingBucket, '']
  NoLambda: !Equals [!Ref LambdaFnArn, '']
  AcmCertificate: !Not [!Equals [!Ref SslCommonName, '']]
  AcmDnsValidation: !Not [!Equals [!Ref SslDomainZoneId, '']]

Resources:

  StaticS3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      BucketName: !Sub 'cloudfront-static-${AWS::AccountId}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - Status: Enabled
            ExpirationInDays: 18250
            NoncurrentVersionExpirationInDays: 30
      #LoggingConfiguration:
      #  DestinationBucketName: !Sub 's3-bucket-access-logs-${AWS::AccountId}-${AWS::Region}'
      #  LogFilePrefix: !Sub 'cloudfront-static-${AWS::AccountId}/'

  CloudfrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub 'Access Identity for s3://${StaticS3Bucket}'

  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref StaticS3Bucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: CloudfrontListBucket
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudfrontOriginAccessIdentity}'
            Action: s3:ListBucket
            Resource: !Sub 'arn:aws:s3:::${StaticS3Bucket}'
          - Sid: CloudfrontGetObject
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudfrontOriginAccessIdentity}'
            Action: s3:GetObject
            Resource: !Sub 'arn:aws:s3:::${StaticS3Bucket}/*'

  # ACM cert for CloudFront distribution
  Certificate:
    Type: AWS::CertificateManager::Certificate
    Condition: AcmCertificate
    Properties:
      DomainName: !Ref SslCommonName
      DomainValidationOptions:
        - DomainName: !Ref SslCommonName
          ValidationDomain: !If [AcmDnsValidation, !Ref 'AWS::NoValue', !Ref SslDomainName]
          HostedZoneId: !If [AcmDnsValidation, !Ref SslDomainZoneId, !Ref 'AWS::NoValue']
      ValidationMethod: !If [AcmDnsValidation, DNS, EMAIL]

  # CloudFront distribution
  Distribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Comment: !Sub 'Lambda@Edge PoC ${SslCommonName}'
        Enabled: true
        # Use cheaper price class prod (North America edge locations)
        PriceClass: PriceClass_100
        Aliases: !If
          - AcmCertificate
          - [!Ref SslCommonName]
          - !Ref 'AWS::NoValue'
        HttpVersion: http2
        IPV6Enabled: true
        DefaultRootObject: index.html
        CustomErrorResponses:
          - ErrorCachingMinTTL: 60
            ErrorCode: 404
            ResponseCode: 404
            ResponsePagePath: /404.html
        Origins:
          - Id: !Sub 'S3-${StaticS3Bucket}'
            DomainName: !Sub '${StaticS3Bucket}.s3.${AWS::Region}.amazonaws.com'
            S3OriginConfig:
              OriginAccessIdentity: !Sub 'origin-access-identity/cloudfront/${CloudfrontOriginAccessIdentity}'
        DefaultCacheBehavior:
          # Default origin is S3
          TargetOriginId: !Sub 'S3-${StaticS3Bucket}'
          Compress: true
          AllowedMethods: [GET, HEAD, OPTIONS]
          ViewerProtocolPolicy: redirect-to-https
          ForwardedValues:
            Cookies:
              Forward: none
            QueryString: false
        CacheBehaviors:
          - TargetOriginId: !Sub 'S3-${StaticS3Bucket}'  # re-using S3 origin
            PathPattern: /api/*
            Compress: true
            AllowedMethods: [DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT]
            ForwardedValues:
              Cookies:
                Forward: all
              QueryString: false
            ViewerProtocolPolicy: redirect-to-https
            # Lambda@Edge config
            LambdaFunctionAssociations: !If
              - NoLambda
              - !Ref 'AWS::NoValue'
              - - EventType: origin-request
                  IncludeBody: true
                  LambdaFunctionARN: !Ref LambdaFnArn
        Logging: !If
          - NoCloudfrontLogging
          - !Ref 'AWS::NoValue'
          - Bucket: !Sub '${CloudfrontLoggingBucket}.s3.amazonaws.com'
            Prefix: !Ref CloudfrontLoggingPrefix
            IncludeCookies: false
        ViewerCertificate: !If
          - AcmCertificate
          - AcmCertificateArn: !Ref Certificate
            MinimumProtocolVersion: TLSv1.2_2019
            SslSupportMethod: sni-only
          - !Ref 'AWS::NoValue'
      Tags:
        - {Key: Name, Value: !Ref 'AWS::StackName'}

  Route53Record:
    Type: AWS::Route53::RecordSetGroup
    Condition: AcmCertificate
    Properties:
      HostedZoneId: !Ref SslDomainZoneId
      RecordSets:
        - Name: !Ref SslCommonName
          Type: A
          AliasTarget:
            HostedZoneId: Z2FDTNDATAQYW2
            DNSName: !GetAtt Distribution.DomainName

Outputs:
  S3Bucket:
    Description: 'S3 Bucket for static hosting'
    Value: !Ref StaticS3Bucket
  Url:
    Description: 'Url of CloudFront distribution'
    Value: !Sub
      - 'https://${Hostname}/'
      - Hostname: !If [AcmCertificate, !Ref SslCommonName, !GetAtt Distribution.DomainName]
